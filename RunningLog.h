#pragma once

#include "DayLog.h"
#include "Course.h"
#include "Location.h"
#include "Shoes.h"
#include "Workout.h"
#include "Splasher.h"
#include "SplashScreenEx.h"
#include "UpcomingRace.h"
#include "UpcomingWorkout.h"
#include "Injury.h"

#ifndef __AFXWIN_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "resource.h"       // main symbols


class CRunningLogApp : public CWinApp
{
public:
	CRunningLogApp(void);
    ~CRunningLogApp(void);

    CSplashThread* GetSplashThread(void) const;
    CSplashScreenEx* GetSplashEx(void) const;
	void SetFileToOpen(CString str);
	CString GetFileToOpen(void) const;

    // overrides
	virtual BOOL InitInstance(void);
    virtual int ExitInstance(void);

	BOOL RegisterShellAssociation(void);
	BOOL UnregisterShellAssociation(void);
	void NotifyAssociationChanged(void);

	DECLARE_MESSAGE_MAP()

protected:
    // data
	CString m_strOpenFile;
    CSplashThread* m_pSplashThread;
    CSplashScreenEx* m_pSplashEx;
};

#ifndef SHCNE_ASSOCCHANGED
#define SHCNE_ASSOCCHANGED 0x08000000L
#define SHCNF_IDLIST 0x0000
#endif
typedef void(WINAPI *LPSHCHANGENOTIFY)(LONG wEventId, UINT uFlags, LPCVOID dwItem1, LPCVOID dwItem2);

#define MetersToMiles(x)        ((x) * .0006214)
#define MilesToMeters(x)        ((x) / .0006214)
#define KilometersToMiles(x)    (MetersToMiles(1000.0 * (x)))
#define MilesToKilometers(x)    (MilesToMeters((x)) / 1000.0)

#define NOGRAPHDATA -12345
#define PRS_NOPR    NOGRAPHDATA
#define TIMER1_ID    1
#define TIMER2_ID    2

typedef CTypedPtrArray<CPtrArray, CDayLog*> DAYARRAY;
typedef CTypedPtrArray<CPtrArray, CCourseRun*> COURSERUNARRAY;
typedef CTypedPtrArray<CPtrArray, CCourseBike*> COURSEBIKEARRAY;
typedef CTypedPtrArray<CPtrArray, CCourseSwim*> COURSESWIMARRAY;
typedef CTypedPtrArray<CPtrArray, CCourseDuathlon*> COURSEDUATHLONARRAY;
typedef CTypedPtrArray<CPtrArray, CCourseTriathlon*> COURSETRIATHLONARRAY;
typedef CTypedPtrArray<CPtrArray, CLocationRun*> LOCATIONRUNARRAY;
typedef CTypedPtrArray<CPtrArray, CLocationBike*> LOCATIONBIKEARRAY;
typedef CTypedPtrArray<CPtrArray, CLocationSwim*> LOCATIONSWIMARRAY;
typedef CTypedPtrArray<CPtrArray, CLocationStrength*> LOCATIONSTRENGTHARRAY;
typedef CTypedPtrArray<CPtrArray, CShoesRun*> SHOESRUNARRAY;
typedef CTypedPtrArray<CPtrArray, CShoesBike*> SHOESBIKEARRAY;
typedef CTypedPtrArray<CPtrArray, CWorkout*> WORKOUTARRAY;
typedef CTypedPtrArray<CPtrArray, CUpcomingRace*> UPCOMINGRACEARRAY;
typedef CTypedPtrArray<CPtrArray, CUpcomingWorkout*> UPCOMINGWORKOUTARRAY;
typedef CTypedPtrArray<CPtrArray, CBike*> BIKEARRAY;
typedef CTypedPtrArray<CPtrArray, CInjury*> INJURYARRAY;

enum tagDAYOFWEEK
{
    SUNDAY = 1,
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY
};


enum tagMONTH
{
    JANUARY = 1,
    FEBRUARY,
    MARCH,
    APRIL,
    MAY,
    JUNE,
    JULY,
    AUGUST,
    SEPTEMBER,
    OCTOBER,
    NOVEMBER,
    DECEMBER
};


enum tagSPORTS
{
    SPORT_RUN = 0,
    SPORT_BIKE,
    SPORT_SWIM,
    SPORT_STRENGTH,
    SPORT_RACERUN,
    SPORT_RACEBIKE,
    SPORT_RACESWIM,
    SPORT_RACETRI,
    SPORT_RACEDU,
    SPORT_START
};


enum tagRUNFIELDSHIFTS
{
    RUNFIELD_LOCATION = 0,
    RUNFIELD_TIME,
    RUNFIELD_TIME2,
    RUNFIELD_DIST,
    RUNFIELD_DIST2,
    RUNFIELD_SHOES,
    RUNFIELD_TEMP,
    RUNFIELD_HR,
    RUNFIELD_SPECTIME,
    RUNFIELD_SPECTIME2,
    RUNFIELD_SPECDIST,
    RUNFIELD_SPECDIST2,
    RUNFIELD_SPECSHOES,

    RUNFIELD_MAX = RUNFIELD_SPECSHOES
};


enum tagBIKEFIELDSHIFTS
{
    BIKEFIELD_LOCATION = 0,
    BIKEFIELD_BIKE,
    BIKEFIELD_TIME,
    BIKEFIELD_TIME2,
    BIKEFIELD_DIST,
    BIKEFIELD_DIST2,
    BIKEFIELD_SHOES,
    BIKEFIELD_TEMP,
    BIKEFIELD_HR,
    BIKEFIELD_SPECTIME,
    BIKEFIELD_SPECTIME2,
    BIKEFIELD_SPECDIST,
    BIKEFIELD_SPECDIST2,
    BIKEFIELD_SPECSHOES,

    BIKEFIELD_MAX = BIKEFIELD_SPECSHOES
};


enum tagSWIMFIELDSHIFTS
{
    SWIMFIELD_LOCATION = 0,
    SWIMFIELD_TIME,
    SWIMFIELD_TIME2,
    SWIMFIELD_DIST,
    SWIMFIELD_DIST2,
    SWIMFIELD_TEMP,
    SWIMFIELD_HR,
    SWIMFIELD_SPECTIME,
    SWIMFIELD_SPECTIME2,
    SWIMFIELD_SPECDIST,
    SWIMFIELD_SPECDIST2,

    SWIMFIELD_MAX = SWIMFIELD_SPECDIST2
};


enum tagSTRFIELDSHIFTS
{
    STRFIELD_LOCATION = 0,
    STRFIELD_TIME,
    STRFIELD_TIME2,
    STRFIELD_TEMP,
    STRFIELD_HR,

    STRFIELD_MAX = STRFIELD_HR
};


enum tagRACERUNFIELDSHIFTS
{
    RACERUNFIELD_COURSE = 0,
    RACERUNFIELD_TIME,
    RACERUNFIELD_TIME2,
    RACERUNFIELD_DIST,
    RACERUNFIELD_DIST2,
    RACERUNFIELD_SHOES,
    RACERUNFIELD_TEMP,
    RACERUNFIELD_HR,
    RACERUNFIELD_SPECTIME,
    RACERUNFIELD_SPECTIME2,
    RACERUNFIELD_SPECTIME3,
    RACERUNFIELD_SPECTIME4,
    RACERUNFIELD_SPECSHOES,
    RACERUNFIELD_PLACE,
    RACERUNFIELD_RACENUM,

    RACERUNFIELD_MAX = RACERUNFIELD_RACENUM
};


enum tagRACEBIKEFIELDSHIFTS
{
    RACEBIKEFIELD_COURSE = 0,
    RACEBIKEFIELD_BIKE,
    RACEBIKEFIELD_TIME,
    RACEBIKEFIELD_TIME2,
    RACEBIKEFIELD_DIST,
    RACEBIKEFIELD_DIST2,
    RACEBIKEFIELD_SHOES,
    RACEBIKEFIELD_TEMP,
    RACEBIKEFIELD_HR,
    RACEBIKEFIELD_SPECTIME,
    RACEBIKEFIELD_SPECTIME2,
    RACEBIKEFIELD_SPECTIME3,
    RACEBIKEFIELD_SPECTIME4,
    RACEBIKEFIELD_SPECSHOES,
    RACEBIKEFIELD_PLACE,
    RACEBIKEFIELD_RACENUM,

    RACEBIKEFIELD_MAX = RACEBIKEFIELD_RACENUM
};


enum tagRACESWIMFIELDSHIFTS
{
    RACESWIMFIELD_COURSE = 0,
    RACESWIMFIELD_TIME,
    RACESWIMFIELD_TIME2,
    RACESWIMFIELD_DIST,
    RACESWIMFIELD_DIST2,
    RACESWIMFIELD_TEMP,
    RACESWIMFIELD_HR,
    RACESWIMFIELD_SPECTIME,
    RACESWIMFIELD_SPECTIME2,
    RACESWIMFIELD_SPECTIME3,
    RACESWIMFIELD_SPECTIME4,
    RACESWIMFIELD_PLACE,
    RACESWIMFIELD_RACENUM,

    RACESWIMFIELD_MAX = RACESWIMFIELD_RACENUM
};


enum tagRACEDUFIELDSHIFTS
{
    RACEDUFIELD_COURSE = 0,
    RACEDUFIELD_OVERALLTIME,
    RACEDUFIELD_OVERALLTIME2,
    RACEDUFIELD_OVERALLTIME3,
    RACEDUFIELD_OVERALLTIME4,
    RACEDUFIELD_TRANS,
    RACEDUFIELD_TRANS2,
    RACEDUFIELD_PLACE,
    RACEDUFIELD_RACENUM,

    RACEDUFIELD_L1TIME,
    RACEDUFIELD_L1TIME2,
    RACEDUFIELD_L1DIST,
    RACEDUFIELD_L1DIST2,
    RACEDUFIELD_L1TEMP,
    RACEDUFIELD_L1HR,
    RACEDUFIELD_L1SHOES,
	RACEDUFIELD_L1SPECTIME,
    RACEDUFIELD_L1SPECTIME2,
    RACEDUFIELD_L1SPECTIME3,
    RACEDUFIELD_L1SPECTIME4,
    RACEDUFIELD_L1SPECSHOES,
    
    RACEDUFIELD_L2BIKE,
    RACEDUFIELD_L2TIME,
    RACEDUFIELD_L2TIME2,
    RACEDUFIELD_L2DIST,
    RACEDUFIELD_L2DIST2,
    RACEDUFIELD_L2TEMP,
    RACEDUFIELD_L2HR,
    RACEDUFIELD_L2SHOES,
    RACEDUFIELD_L2SPECTIME,
    RACEDUFIELD_L2SPECTIME2,
    RACEDUFIELD_L2SPECTIME3,
    RACEDUFIELD_L2SPECTIME4,
    RACEDUFIELD_L2SPECSHOES,

    RACEDUFIELD_L3TIME,
    RACEDUFIELD_L3TIME2,
    RACEDUFIELD_L3DIST,
    RACEDUFIELD_L3DIST2,
    RACEDUFIELD_L3TEMP,
    RACEDUFIELD_L3HR,
    RACEDUFIELD_L3SHOES,
    RACEDUFIELD_L3SPECTIME,
    RACEDUFIELD_L3SPECTIME2,
    RACEDUFIELD_L3SPECTIME3,
    RACEDUFIELD_L3SPECTIME4,
    RACEDUFIELD_L3SPECSHOES,

    RACEDUFIELD_MAX = RACEDUFIELD_L3SPECSHOES
};


enum tagRACETRIFIELDSHIFTS
{
    RACETRIFIELD_COURSE = 0,
    RACETRIFIELD_OVERALLTIME,
    RACETRIFIELD_OVERALLTIME2,
    RACETRIFIELD_OVERALLTIME3,
    RACETRIFIELD_OVERALLTIME4,
    RACETRIFIELD_TRANS,
    RACETRIFIELD_TRANS2,
    RACETRIFIELD_PLACE,
    RACETRIFIELD_RACENUM,

    RACETRIFIELD_L1TIME,
    RACETRIFIELD_L1TIME2,
    RACETRIFIELD_L1DIST,
    RACETRIFIELD_L1DIST2,
    RACETRIFIELD_L1TEMP,
    RACETRIFIELD_L1HR,
	RACETRIFIELD_L1SPECTIME,
    RACETRIFIELD_L1SPECTIME2,
    RACETRIFIELD_L1SPECTIME3,
    RACETRIFIELD_L1SPECTIME4,
    
    RACETRIFIELD_L2BIKE,
    RACETRIFIELD_L2TIME,
    RACETRIFIELD_L2TIME2,
    RACETRIFIELD_L2DIST,
    RACETRIFIELD_L2DIST2,
    RACETRIFIELD_L2TEMP,
    RACETRIFIELD_L2HR,
    RACETRIFIELD_L2SHOES,
    RACETRIFIELD_L2SPECTIME,
    RACETRIFIELD_L2SPECTIME2,
    RACETRIFIELD_L2SPECTIME3,
    RACETRIFIELD_L2SPECTIME4,
    RACETRIFIELD_L2SPECSHOES,

    RACETRIFIELD_L3TIME,
    RACETRIFIELD_L3TIME2,
    RACETRIFIELD_L3DIST,
    RACETRIFIELD_L3DIST2,
    RACETRIFIELD_L3TEMP,
    RACETRIFIELD_L3HR,
    RACETRIFIELD_L3SHOES,
    RACETRIFIELD_L3SPECTIME,
    RACETRIFIELD_L3SPECTIME2,
    RACETRIFIELD_L3SPECTIME3,
    RACETRIFIELD_L3SPECTIME4,
    RACETRIFIELD_L3SPECSHOES,

    RACETRIFIELD_MAX = RACETRIFIELD_L3SPECSHOES
};


enum tagSTARTFIELD
{
    STARTFIELD_SLEEP = 0,
    STARTFIELD_SLEEP2,
    STARTFIELD_WEIGHT,
    STARTFIELD_WEIGHT2,

    STARTFIELD_MAX = STARTFIELD_WEIGHT2
};


enum tagPACEFORMAT
{
    PACEFORMAT_MINDIST = 0,
    PACEFORMAT_DISTHR,
    PACEFORMAT_MIN100M,
	PACEFORMAT_MIN100Y
};   
    
    
enum tagHITS
{
    NO_SELECTION = 100,
    HIT_MONTHSUM = 50,
    HIT_WEEKSUM1 = 60,
    HIT_WEEKSUM2,
    HIT_WEEKSUM3,
    HIT_WEEKSUM4,
    HIT_WEEKSUM5,
    HIT_WEEKSUM6
};


enum tagROTATIONINCREMENT
{
	FIRST_ROTATIONINCREMENT = 0,
	ROTATION_15DEGREES = 0,
	ROTATION_10DEGREES,
	ROTATION_5DEGREES,
	ROTATION_2DEGREES,
	ROTATION_1DEGREES,
	ROTATION_N1DEGREES,
	ROTATION_N2DEGREES,
	ROTATION_N5DEGREES,
	ROTATION_N10DEGREES,
	ROTATION_N15DEGREES,
	LAST_ROTATIONINCREMENT = ROTATION_N15DEGREES
};


enum tagTWODSERIESTYPE2D
{
	FIRST_TWODSERIESTYPE2D = 0,
	TWODSERIESTYPE2D_LINE = 0,
	TWODSERIESTYPE2D_BAR,
	TWODSERIESTYPE2D_STICK,
	TWODSERIESTYPE2D_POINTS,
	TWODSERIESTYPE2D_SPLINE,
	TWODSERIESTYPE2D_AREA,
	TWODSERIESTYPE2D_RIBBON,
	TWODSERIESTYPE2D_STEP,
	TWODSERIESTYPE2D_POINTSPLUSLINE,
	TWODSERIESTYPE2D_POINTSPLUSBFL,
	TWODSERIESTYPE2D_POINTSPLUSBFC,
	TWODSERIESTYPE2D_POINTSPLUSSPLINE,
	LAST_TWODSERIESTYPE2D = TWODSERIESTYPE2D_POINTSPLUSSPLINE
};


enum tagTHREEDSERIESTYPEBAR
{
	FIRST_THREEDSERIESTYPEBAR = 0,
	THREEDSERIESTYPEBAR_WIREFRAME = 0,
	THREEDSERIESTYPEBAR_SURFACE,
	THREEDSERIESTYPEBAR_SURFACESHADING,
	THREEDSERIESTYPEBAR_SURFACEPIXELS,
	LAST_THREEDSERIESTYPEBAR = THREEDSERIESTYPEBAR_SURFACEPIXELS
};

enum tagTHREEDSERIESTYPESCATTER
{
	FIRST_THREEDSERIESTYPESCATTER = 0,
	THREEDSERIESTYPESCATTER_POINTS = 0,
	THREEDSERIESTYPESCATTER_LINE,
	THREEDSERIESTYPESCATTER_POINTSPLUSLINE,
	THREEDSERIESTYPESCATTER_AREA,
	LAST_THREEDSERIESTYPESCATTER = THREEDSERIESTYPESCATTER_AREA
};

enum tagPOLARSERIESTYPEPOLAR
{
	FIRST_POLARSERIESTYPEPOLAR = 0,
	POLARSERIESTYPEPOLAR_LINE = 0,
	POLARSERIESTYPEPOLAR_POINTS,
	POLARSERIESTYPEPOLAR_POINTSPLUSLINE,
	LAST_POLARSERIESTYPEPOLAR = POLARSERIESTYPEPOLAR_POINTSPLUSLINE
};

enum tagPOLARSERIESTYPESMITH
{
	FIRST_POLARSERIESTYPESMITH = 0,
	POLARSERIESTYPESMITH_LINE = 0,
	POLARSERIESTYPESMITH_POINTS,
	POLARSERIESTYPESMITH_POINTSPLUSLINE,
	LAST_POLARSERIESTYPESMITH = POLARSERIESTYPESMITH_POINTSPLUSLINE
};

enum tagPOLARSERIESTYPEROSE
{
	FIRST_POLARSERIESTYPEROSE = 0,
	POLARSERIESTYPEROSE_LINE = 0,
	POLARSERIESTYPEROSE_POINTS,
	POLARSERIESTYPEROSE_POINTSPLUSLINE,
	LAST_POLARSERIESTYPEROSE = POLARSERIESTYPEROSE_POINTSPLUSLINE
};

enum tagPIESERIESTYPE
{
	FIRST_PIESERIESTYPE = 0,
	PIESERIESTYPE_VALUE = 0,
	PIESERIESTYPE_PERCENTAGE,
	LAST_PIESERIESTYPE = PIESERIESTYPE_PERCENTAGE
};

enum tagDATATYPE
{
    FIRST_DATATYPE = 0,
    DATATYPE_TIME = 0,
    DATATYPE_MINUTESRUN,
    DATATYPE_MINUTESBIKE,
    DATATYPE_MINUTESSWIM,
    DATATYPE_MINUTESSTRENGTH,
    DATATYPE_MINUTESOVERALL,
    DATATYPE_MILESRUN,
    DATATYPE_MILESBIKE,
    DATATYPE_MILESSWIM,
    DATATYPE_PACERUN,
    DATATYPE_PACEBIKE,
    DATATYPE_PACESWIM,
    DATATYPE_WORKOUTSRUN,
    DATATYPE_WORKOUTSBIKE,
    DATATYPE_WORKOUTSSWIM,
    DATATYPE_WORKOUTSSTRENGTH,
    DATATYPE_WORKOUTSOVERALL,
    DATATYPE_TEMP,
    DATATYPE_HR,
    DATATYPE_SLEEP,
    DATATYPE_WEIGHT,
    DATATYPE_POINTS,
    DATATYPE_TIMEOFDAY,
	DATATYPE_CALORIES,
    DATATYPE_FORMULA,
    LAST_DATATYPE = DATATYPE_FORMULA
};

enum tagSEARCHTYPE
{
    FIRST_SEARCHTYPE = 0,
    SEARCHTYPE_MINUTESRUN = 0,
    SEARCHTYPE_MINUTESBIKE,
    SEARCHTYPE_MINUTESSWIM,
    SEARCHTYPE_MINUTESSTRENGTH,
    SEARCHTYPE_MINUTESOVERALL,
    SEARCHTYPE_MILESRUN,
    SEARCHTYPE_MILESBIKE,
    SEARCHTYPE_MILESSWIM,
    SEARCHTYPE_PACERUN,
    SEARCHTYPE_PACEBIKE,
    SEARCHTYPE_PACESWIM,
    SEARCHTYPE_WORKOUTSRUN,
    SEARCHTYPE_WORKOUTSBIKE,
    SEARCHTYPE_WORKOUTSSWIM,
    SEARCHTYPE_WORKOUTSSTRENGTH,
    SEARCHTYPE_WORKOUTSOVERALL,
    SEARCHTYPE_TEMP,
    SEARCHTYPE_HR,
    SEARCHTYPE_SLEEP,
    SEARCHTYPE_WEIGHT,
    SEARCHTYPE_POINTS,
	SEARCHTYPE_CALORIES,
    LAST_SEARCHTYPE = SEARCHTYPE_CALORIES
};


enum tagRELATIONTYPE
{
	FIRST_RELATIONTYPE = 0,
	RELATIONTYPE_LTE = 0,
	RELATIONTYPE_LT,
	RELATIONTYPE_EQ,
	RELATIONTYPE_GT,
	RELATIONTYPE_GTE,
	LAST_RELATIONTYPE = RELATIONTYPE_GTE
};

enum tagPOINTTYPE
{
	FIRST_POINTTYPE = 0,
	POINTTYPE_PLUS = 0,
	POINTTYPE_CROSS,
	POINTTYPE_CIRCLE,
	POINTTYPE_FILLEDCIRCLE,
	POINTTYPE_SQUARE,
	POINTTYPE_FILLEDSQUARE,
	POINTTYPE_DIAMOND,
	POINTTYPE_FILLEDDIAMOND,
	POINTTYPE_UPWARDTRI,
	POINTTYPE_FILLEDUPWARDTRI,
	POINTTYPE_DOWNWARDTRI,
	POINTTYPE_FILLEDDOWNWARDTRI,
	LAST_POINTTYPE = POINTTYPE_FILLEDDOWNWARDTRI
};

enum tagLINETYPE
{
	FIRST_LINETYPE = 0,
	LINETYPE_THIN = 0,
	LINETYPE_MEDIUMTHIN,
	LINETYPE_MEDIUM,
	LINETYPE_MEDIUMTHICK,
	LINETYPE_THICK,
	LINETYPE_EXTRATHICK,
	LINETYPE_DASH,
	LINETYPE_DOT,
	LINETYPE_DASHDOT,
	LINETYPE_DASHDOTDOT,
	LAST_LINETYPE = LINETYPE_DASHDOTDOT
};


enum tagPOINTSELECTION
{
	FIRST_POINTSELECTION = 0,
	POINTSELECTION_NONE = 0,
	POINTSELECTION_SQUARE,
	POINTSELECTION_CROSSHAIR,
	LAST_POINTSELECTION = POINTSELECTION_CROSSHAIR
};


enum tagLEGENDLOCATION
{
	FIRST_LEGENDLOC = 0,
	LEGENDLOC_TOP = 0,
	LEGENDLOC_RIGHT,
	LEGENDLOC_BOTTOM,
	LEGENDLOC_LEFT,
	LAST_LEGENDLOC = LEGENDLOC_LEFT
};

enum tagTYPEOFGRAPH
{
	FIRST_GRAPHTYPE = 0,
    GRAPHTYPE_2D2D = 0,
	GRAPHTYPE_3DBAR,
	GRAPHTYPE_3DSCATTER,
	GRAPHTYPE_PIE,
	GRAPHTYPE_POLARPOLAR,
	GRAPHTYPE_POLARSMITH,
	GRAPHTYPE_POLARROSE,
	LAST_GRAPHTYPE = GRAPHTYPE_POLARROSE
};

enum tagSEARCHFORTYPE
{
	FIRST_SEARCHFOR = 0,
	SEARCHFOR_DAY = 0,
	SEARCHFOR_WEEK,
	SEARCHFOR_MONTH,
	LAST_SEARCHFOR = SEARCHFOR_MONTH
};

enum tagDAYTYPE
{
    DAYTYPE_NORMAL = 0,
    DAYTYPE_GRAYED,
    DAYTYPE_MONTHSUM,
    DAYTYPE_WEEKSUM
};


enum tagACTIVITYTYPE
{
    FIRST_ACTIVITY_TYPE = 0,
    ACTIVITY_BIKING = 0,
    ACTIVITY_RACE,
    ACTIVITY_RUNNING,
    ACTIVITY_STRENGTH,
    ACTIVITY_SWIMMING,
    LAST_ACTIVITY_TYPE = 4
};


enum tagOLDWORKOUTOLDTYPE
{
    TYPE_WEIGHTS = 0,
    TYPE_POOL,
    TYPE_BIKE,
    TYPE_EZ,
    TYPE_NORMAL,
    TYPE_TEMPO,
    TYPE_INTERVALS,
    TYPE_HILLS,
    TYPE_RACE,
    TYPE_TREADMILL,
    TYPE_OTHER
};


enum tagDISTUNITS
{
    DISTUNITS_MI = 0,
    DISTUNITS_KM,
    DISTUNITS_M,
    DISTUNITS_YD,
    DISTUNITS_FT,
    DISTUNITS_IN,
    DISTUNITS_PSC,
    NUM_DISTUNITS = 7 
};


enum tagHEIGHTUNITS
{
    HEIGHTUNITS_IN = 0,
    HEIGHTUNITS_CM,
    NUM_HEIGHTUNITS = 2
};


enum tagWEIGHTUNITS
{
    WEIGHTUNITS_LBS = 0,
    WEIGHTUNITS_KG,
    NUM_WEIGHTUNITS = 2
};


enum tagTEMPERATUREUNITS
{
    TEMPUNITS_DEG = 0,
    TEMPUNITS_CELSIUS,
    NUM_TEMPERATUREUNITS = 2
};


enum tagBASETYPE
{
    BASED_ON_DISTANCE = 0,
    BASED_ON_TIME
};


enum tagSEX
{
    SEX_MALE = 0,
    SEX_FEMALE,
};


enum tagRUNTYPE
{
    FIRST_RUN_WORKOUT = 0,
    RUNTYPE_EZ = 0,
    RUNTYPE_HARD,
    RUNTYPE_HILLS,
    RUNTYPE_INTERVALS,
    RUNTYPE_NORMAL,
    RUNTYPE_OTHER,
    RUNTYPE_POOL,
    RUNTYPE_TEMPO,
    RUNTYPE_TREADMILL,
    LAST_RUN_WORKOUT
};


enum tagBIKETYPE
{
    FIRST_BIKE_WORKOUT = 0,
    BIKETYPE_EZ = 0,
    BIKETYPE_HARD,
    BIKETYPE_HILLS,
    BIKETYPE_INTERVALS,
    BIKETYPE_NORMAL,
    BIKETYPE_OTHER,
    BIKETYPE_TRAINER,
	BIKETYPE_MOUNTAINBIKE,
	BIKETYPE_TIMETRIAL,
    LAST_BIKE_WORKOUT
};


enum tagSWIMTYPE
{
    FIRST_SWIM_WORKOUT = 0,
    SWIMTYPE_DRILLS = 0,
    SWIMTYPE_EZ,
    SWIMTYPE_HARD,
    SWIMTYPE_INTERVALS,
    SWIMTYPE_NORMAL,
    SWIMTYPE_OPENWATER,
    SWIMTYPE_OTHER,
    LAST_SWIM_WORKOUT
};


enum tagSTRENGTHTYPE
{
    FIRST_STRENGTH_WORKOUT = 0,
    STRENGTHTYPE_ABS = 0,
    STRENGTHTYPE_OTHER,
    STRENGTHTYPE_WEIGHTS,
    LAST_STRENGTH_WORKOUT
};


enum tagRACETYPE
{
    FIRST_RACE = 0,
    RACETYPE_DUATHLON = 0,
    RACETYPE_BIKE,
    RACETYPE_RUN,
    RACETYPE_SWIM,
    RACETYPE_TRIATHLON,
    LAST_RACE
};


enum tagDESIREDQUANTITY
{
    QUANTITY_OVERALL = 0,
    QUANTITY_TRANS1,
    QUANTITY_TRANS2, 
    QUANTITY_LEG1,
    QUANTITY_LEG2,
    QUANTITY_LEG3
};


enum tagWIND
{
    WIND_NONE = 0,
    WIND_LIGHT,
    WIND_STRONG,
	WIND_MEDIUM,
	WIND_VERYSTRONG
};


enum tagPACEFORMATSPORT
{
    FORMAT_RUN = 0,
    FORMAT_BIKE,
    FORMAT_SWIM
};


enum tagCHOPPINESS
{
    CHOPPINESS_NONE = 0,
    CHOPPINESS_LIGHT,
    CHOPPINESS_HEAVY,
	CHOPPINESS_MEDIUM,
	CHOPPINESS_VERYHEAVY
};


enum tagCHARTTYPE
{
    CHARTTYPE_DOUBLE = 0,
    CHARTTYPE_INT,
    CHARTTYPE_DATE
};


enum tagLEGS
{
    FIRST_LEG = 0,
    LEG_1 = 0,
    LEG_2,
    LEG_3,
    NUM_LEGS = 3
};


enum tagDAYRECTS
{
    DAY_START = 1,
    WEEK_START = 43,
    MONTH_START = 49
};